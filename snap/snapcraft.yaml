%YAML 1.1
---
# Snapcraft Recipe for waifu2x-ncnn-vulkan
# ------------------------------
# This file is in the YAML data serialization format:
# http://yaml.org
# For the spec. of writing this file refer the following documentation:
# * The snapcraft format
#   https://docs.snapcraft.io/the-snapcraft-format/8337
# * Snap Documentation
#   https://docs.snapcraft.io
# * Topics under the doc category in the Snapcraft Forum
#   https://forum.snapcraft.io/c/doc
# For support refer to the snapcraft section in the Snapcraft Forum:
# https://forum.snapcraft.io/c/snapcraft
name: waifu2x-ncnn-vulkan
title: waifu2x-ncnn-vulkan (UNOFFICIAL)
summary: Image Super-Resolution for Anime-style art
description: |
  waifu2x converter ncnn version, runs fast on intel / amd / nvidia with vulkan

  waifu2x-ncnn-vulkan use [ncnn project][1] as the universal nerual network inference framework

  [1]: https://github.com/Tencent/ncnn

  **Snap specific information**

  This is not an official distribution of waifu2x-ncnn-vulkan, for any problems regarding the use of this snap please refer to the snap issue tracker:

  https://github.com/Lin-Buo-Ren/waifu2x-snap/issues

  This snap currently only ships intel / amd vulkan drivers

# The path of icon to represent the snap, relative to the source tree directory
# Only PNG or SVG image is supported, dimension must be greater than 256x256px
#icon: snap/gui/waifu2x.png

# The license of this application, in SPDX format
# NOTE: Currently only supports SPDX 2.1 license expressions, as described in Appendix IV of
# https://spdx.org/spdx-specification-21-web-version
# Supported expressions:
# https://github.com/snapcore/snapd/blob/HEAD/spdx/licenses.go
license: MIT

# Version string just for humans, typically '1.2+git' or '1.3.2'
# The wrapping single quotes are often required to avoid the version string
# being accidentally interpreted as a YAML non-string(like '1', '1.2').
# http://yaml.org/type
# https://arp242.net/weblog/yaml_probably_not_so_great_after_all.html#surprising-behaviour
# NOTE: This key is mutual exclusive with the `adopt-info` key
#version: Derived from the part specified by the `adopt-info` property

# Extract metadata from the main snap part
# https://forum.snapcraft.io/t/extracting-information-from-sources-in-snapcraft-parts/4642
adopt-info: main

# Base runtime
# The common runtime for the snap to run on, or `bare` for static linked applications
base: core18

# Security confinement
# Use `devmode` to getting started
# Flip to `strict` once you have the right plugs and slots,
# or `classic` once you determine that strict confinement is not currently possible
confinement: strict

# Snap Grade
# Use `devel` to getting started
# Flip to `stable` once you determine that the snap is matured, only `stable` grade
# snaps can be promoted to `candidate` and `stable` channels
grade: stable

# Run `snapcraft help sources` for supported keywords on pulling a part's source ingredients
# Run `snapcraft plugins` for supported build helper plugins
# Run `snapcraft help plugins` for supported keywords on building a part
# For `override-*` scriptlets used to modify behavior of certain part's lifecycle phase, check out:
# https://docs.snapcraft.io/scriptlets/4892
parts:
  # Files to patch the files in the snap
  patching:
    source: snap/local/patching
    plugin: dump
    organize:
      '*': patching/
    prime:
    - -*

  # Launcher programs to fix problems at runtime
  launchers:
    source: snap/local/launchers
    plugin: dump
    organize:
      '*': bin/
    stage:
    - -bin/README.*

  # Programs to modify the behavior of each step of the snapcraft lifecycles
  scriptlets:
    source: snap/local/scriptlets
    plugin: dump
    organize:
      '*': scriptlets/
    prime:
    - -*

  # Stage snap for fixing the glibc locales(and gnu gettext I18N support)
  # This part is only required for non GUI apps that don't uses the desktop-launch launchers
  locales-launch:
    plugin: nil
    stage-snaps:
    - locales-launch
    stage-packages:
    - libc-bin
    - locales

  # Check out the tagged release revision if it isn't promoted to the stable channel
  # https://forum.snapcraft.io/t/selective-checkout-check-out-the-tagged-release-revision-if-it-isnt-promoted-to-the-stable-channel/10617
  selective-checkout:
    plugin: nil
    build-packages:
    - git
    stage-snaps:
    - selective-checkout/latest/edge
    prime:
    - -*

  vulkan-sdk:
    plugin: nil
    override-stage: |
      wget -qO - http://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
      sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.1.106-bionic.list http://packages.lunarg.com/vulkan/1.1.106/lunarg-vulkan-1.1.106-bionic.list
      sudo apt update
      sudo apt install --yes libvulkan-dev

  # https://github.com/Tencent/ncnn/wiki/how-to-build#build-for-linux-x86
  ncnn:
    after:
    - glslang-tools
    - vulkan-sdk

    source: https://github.com/Tencent/ncnn.git
    source-commit: c180e875026b6f6ffa0f6e3e489a5c1487439b7f
    #source-depth: 1
    build-packages:
    - g++
    - libprotobuf-dev

    # Provided by vulkan-sdk part
    #- libvulkan-dev

    - protobuf-compiler
    stage-packages:
    - libprotobuf10
    plugin: cmake
    configflags:
    - -DNCNN_VULKAN=ON
    filesets:
      library-include:
      - include/*
      library-static:
      - lib/*.a
    prime:
    - -*

  glslang-tools:
    source: https://github.com/KhronosGroup/glslang.git
    source-depth: 1
    source-tag: 7.11.3188
    plugin: cmake
    build-packages:
    - g++
    configflags:
    - -DCMAKE_BUILD_TYPE=Release
    stage:
    - bin/glslangValidator
    prime:
    - -*

  main:
    after:
    - ncnn
    - patching
    - selective-checkout
    - vulkan-sdk

    source: https://github.com/nihui/waifu2x-ncnn-vulkan.git
    source-depth: 30
    override-pull: |
      set -o nounset

      snapcraftctl pull

      "$SNAPCRAFT_STAGE"/scriptlets/selective-checkout \
        --append-packaging-revision \
        --release-tag-pattern='^[[:digit:]]+$'

    plugin: cmake
    build-packages:
    - libopenmpi-dev

    # Provided by vulkan-sdk part
    #- libvulkan-dev

    stage-packages:
    - libgomp1
    - libopenmpi2
    - libvulkan1
    - mesa-vulkan-drivers

    override-build: |
      patch \
        --strip=1 \
        "${SNAPCRAFT_PART_SRC}"/CMakeLists.txt \
        < "${SNAPCRAFT_STAGE}"/patching/waifu2x-ncnn-vulkan-add-missing-install-target.patch

      sed \
        --in-place \
        "s#/home/nihui/osd/ncnn/build/install#${SNAPCRAFT_STAGE}#" \
        "${SNAPCRAFT_PART_SRC}"/CMakeLists.txt

      snapcraftctl build

      cp \
        --recursive \
        --verbose \
        "${SNAPCRAFT_PART_SRC}"/models-cunet \
        "${SNAPCRAFT_PART_INSTALL}"/bin

# Apps that are exposed by the snap package
# If the _app_name_ is identical with the _snap_name_ it can be directly run
# with `_snap_name_` or `snap run _snap_name_` commands, otherwise it can only be run
# via `_snap_name_._app_name_` or `snap run _snap_name_._app_name_`
apps:
  waifu2x-ncnn-vulkan:
    # The adapter to set up runtime environment at the launch of the snap
    # NOTE: The `command-chain` property is only supported by the `full` adapter
    adapter: full

    # An *relative path* to an executable file root from the `prime` directory to be executed, and its command-line arguments
    # NOTE: The right angle bracket at the beginning of the value of the `command` keyword starts a YAML folded style block scalar, refer the following spec document for more info: http://yaml.org/spec/1.2/spec.html#id2796251
    command: bin/waifu2x-launch

    # The commands that are run, in order, before running the one specified by the `command` key
    command-chain:
    - bin/locales-launch

# Refer the following documentation for asserting interface plugs and slots in a security confined snap:
# Interface management - doc - snapcraft.io
# https://docs.snapcraft.io/interface-management/6154
# Supported interfaces - doc - snapcraft.io
# https://docs.snapcraft.io/supported-interfaces/7744
# Non-A/C: Non-autoconnect interface
plugs:
  # Regular files access
  home:
  removable-media: # Non-A/C

  # Graphics hardware access
  opengl:

  # Network access
  #network:

#slots:

layout:
  /usr/share/vulkan:
    symlink: $SNAP/usr/share/vulkan

  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/libvulkan_intel.so:
    symlink: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/libvulkan_intel.so

  /usr/lib/$SNAPCRAFT_ARCH_TRIPLET/libvulkan_radeon.so:
    symlink: $SNAP/usr/lib/$SNAPCRAFT_ARCH_TRIPLET/libvulkan_radeon.so
